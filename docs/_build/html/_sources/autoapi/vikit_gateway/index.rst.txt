vikit_gateway
=============

.. py:module:: vikit_gateway


Attributes
----------

.. autoapisummary::

   vikit_gateway.vikit_api_key
   vikit_gateway.vikit_backend_url
   vikit_gateway.KEYWORDS_FORMAT_PROMPT


Classes
-------

.. autoapisummary::

   vikit_gateway.VikitGateway


Module Contents
---------------

.. py:data:: vikit_api_key

.. py:data:: vikit_backend_url
   :value: 'https://videho.replit.app/models'


.. py:data:: KEYWORDS_FORMAT_PROMPT
   :value: "' Just list the keywords in english language, separated by a coma, do not re-output the prompt....


.. py:class:: VikitGateway

   Bases: :py:obj:`vikit.gateways.ML_models_gateway.MLModelsGateway`


   A Gateway to interact with the Vikit API


   .. py:method:: generate_background_music(duration: int = 3, prompt: str = None) -> str

      Here we generate the music to add as background music

      Args:
          - duration: int - the duration of the music in seconds
          - prompt: str - the prompt to generate the music from

      Returns:
          - str: the path to the generated music



   .. py:method:: generate_seine_transition(source_image_path, target_image_path)

      Generate a transition between two videos

      Args:
          index: The index of the video
          initial: Whether this is the initial video

      Returns:
          The link to the generated video



   .. py:method:: compose_music_from_text(prompt_text: str, duration: int)

      Compose a music for a prompt text

      Args:
          prompt_text: The text prompt
          duration: The duration of the music

      Returns:
          The link to the generated music



   .. py:method:: get_music_generation_keywords(text) -> str

      Generate keywords from a text using the Replicate API

      At the end of the resulting prompt we get 3 words that will be used to generate a file name out of
      the generated keywords

      Args:
          text: The text to generate keywords from

      Returns:
          A list of keywords



   .. py:method:: interpolate(video)

      Run some interpolation magic. This model may fail after timeout, so you
      should call it with retry logic

      Args:
          video: The video to interpolate

      Returns:
          a link to the interpolated video



   .. py:method:: get_keywords_from_prompt(subtitleText, excluded_words: str = None)

      Generates keywords from a subtitle text using the Replicate API.

      Args:
          A subtitle text

      Returns:
          A list of keywords generated by an LLM using the subtitle text




   .. py:method:: get_enhanced_prompt(subtitleText)

      Generates an enhanced prompt from an original one, probably written by a user or
      translated from an audio

      Args:
          A subtitle text

      Returns:
          A prompt enhanced by an LLM



   .. py:method:: get_subtitles(audiofile_path)

      Extract subtitles from an audio file using the Replicate API

      Args:
          i (int): The index of the audio slice

      Returns:
          subs: The subtitles obtained from the Replicate API




   .. py:method:: generate_video(prompt: str)

      Generate a video from the given prompt

      Args:
          prompt: The prompt to generate the video from

      returns:
              The link to the generated video



