replicate_gateway
=================

.. py:module:: replicate_gateway


Attributes
----------

.. autoapisummary::

   replicate_gateway.KEYWORDS_FORMAT_PROMPT


Classes
-------

.. autoapisummary::

   replicate_gateway.ReplicateGateway


Module Contents
---------------

.. py:data:: KEYWORDS_FORMAT_PROMPT
   :value: Multiline-String

   .. raw:: html

      <details><summary>Show Value</summary>

   .. code-block:: python

      """' Just list the keywords in english language, separated by a coma, do not re-output the prompt. 
                  The answer should be a list of keywords and exactly match the following format:  'KEYWORD1, KEYWORD2, KEYWORD3, etc' 
                  where KEYWORD1 and the other ones are generated by you. 
                  The last word of your answer should be a summary of all the other keywords so I can generate a file name 
                  out of it, it should be limited to three words joined by the underscore character and you should only use 
                  characters compatible with filenames in the summary, so only standard alphanumerical characters. Don't prefix the
                  summary with any special characters, just the words joined by underscores.'"""

   .. raw:: html

      </details>



.. py:class:: ReplicateGateway

   Bases: :py:obj:`vikit.gateways.ML_models_gateway.MLModelsGateway`


   A class to represent the Replicate Gateway, a gateway to the Replicate API

   Replicate is a platform that allows to run AI models in the cloud


   .. py:method:: generate_background_music(duration: int = 3, prompt: str = None) -> str

      Here we generate the music to add as background music

      Args:
          duration: int - the duration of the music in seconds
          prompt: str - the prompt to generate the music from

      Returns:
          str: the path to the generated music



   .. py:method:: generate_seine_transition(source_image_path, target_image_path)

      Generate a transition between two videos

      Args:
          index: The index of the video
          initial: Whether this is the initial video

      Returns:
          The link to the generated video



   .. py:method:: compose_music_from_text(prompt_text: str, duration: int)

      Compose a music for a prompt text

      Args:
          prompt_text: The text prompt
          duration: The duration of the music

      Returns:
          The link to the generated music



   .. py:method:: get_music_generation_keywords(text) -> str

      Generate keywords from a text using the Replicate API

      At the end of the resulting prompt we get 3 words that will be used to generate a file name out of
      the generated keywords

      Args:
          text: The text to generate keywords from

      Returns:
          A list of keywords



   .. py:method:: interpolate(video)

      Run some interpolation magic. This model may fail after timeout, so you
      should call it with retry logic

      Args:
          video: The video to interpolate

      Returns:
          a link to the interpolated video



   .. py:method:: get_keywords_from_prompt(subtitleText, excluded_words: str = None)

      Generates keywords from a subtitle text using the Replicate API.

      Args:
          A subtitle text
      Returns:
          A white space separated string of keywords



   .. py:method:: get_enhanced_prompt(subtitleText)

      Generates an enhanced prompt from an original one, probably written by a user or
      translated from an audio

      Args:
          subtitleText: The original prompt

      Returns:
          A white space separated string of keywords composing the enhanced prompt




   .. py:method:: get_subtitles(audiofile_path)

      Extract subtitles from an audio file using the Replicate API

      Args:
          i (int): The index of the audio slice

      Returns:
          subs: The subtitles obtained from the Replicate API




   .. py:method:: generate_video(prompt: str)

      Generate a video from the given prompt

      Args:
          prompt: The prompt to generate the video from

      returns:
          the video



