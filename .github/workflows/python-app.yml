# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Install ffmpeg
      run: sudo apt-get update && sudo apt-get install -y ffmpeg
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics  --ignore=E501,W503
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --select=E9,F63,F7,F82 --show-source  --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      env:
        VIKIT_API_TOKEN: ${{ secrets.VIKIT_API_TOKEN }}      
        ELEVEN_LABS_KEY: ${{ secrets.ELEVEN_LABS_KEY }}      
        REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}      
        OPENAI_WHISPER_MODEL_ID: ${{ secrets.OPENAI_WHISPER_MODEL_ID }}      
        TESTMODE: ${{ vars.TESTMODE }}
        ELEVEN_LABS_API_URI: ${{ vars.ELEVEN_LABS_API_URI }}
        NB_RETRIES_HTTP_CALLS: ${{ vars.NB_RETRIES_HTTP_CALLS }}
        SUBTITLES_MIN_DURATION: ${{ vars.SUBTITLES_MIN_DURATION }}
        NUMBER_OF_SUBTITLES_PER_VIDEO_PROMPT: ${{ vars.NUMBER_OF_SUBTITLES_PER_VIDEO_PROMPT }}
        SUBTITLES_FILE_NAME : ${{ vars.SUBTITLES_FILE_NAME }}
        CLEANUP_TEMPFILES: ${{ vars.CLEANUP_TEMPFILES }}
        SUB_AUDIO_FOR_SOUND_PREFIX : ${{ vars.SUB_AUDIO_FOR_SOUND_PREFIX }}
        PROMPT_MP3_FILE_NAME: ${{ vars.PROMPT_MP3_FILE_NAME }}
        VIDEO_ENCODED_WITHOUT_MUSIC_FILE_PREFIX: ${{ vars.VIDEO_ENCODED_WITHOUT_MUSIC_FILE_PREFIX }}
        INITIAL_AUDIO_FILE_NAME: ${{ vars.INITIAL_AUDIO_FILE_NAME }}
        VIDEO_LIST_FILE_NAME :  ${{ vars.VIDEO_LIST_FILE_NAME }}
        DEFAULT_BACKGROUND_MUSIC :  ${{ vars.DEFAULT_BACKGROUND_MUSIC }}        
      run: |
        pytest -s --cov=. --cov-report=xml -m "unit"
        pytest -s --cov=. --cov-report=xml -n 4 -m "core_local_integration"
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}                
